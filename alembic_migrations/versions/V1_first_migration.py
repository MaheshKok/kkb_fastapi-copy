"""first_migration

Revision ID: 84d3bebb3935
Revises:
Create Date: 2023-06-04 23:39:39.609898

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "84d3bebb3935"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("access_token", sa.String(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=False),
        sa.Column("token_expiry", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "broker_clients",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("access_token", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("api_key", sa.String(), nullable=True),
        sa.Column("app_id", sa.String(), nullable=True),
        sa.Column("totp", sa.String(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_broker_user_id"), "broker_clients", ["user_id"], unique=False)
    op.create_table(
        "strategy",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("exchange", sa.String(), nullable=False),
        sa.Column("instrument_type", sa.String(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("symbol", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("broker_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["broker_id"],
            ["broker_clients.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_strategy_broker_id"), "strategy", ["broker_id"], unique=False)
    op.create_index(op.f("ix_strategy_exchange"), "strategy", ["exchange"], unique=False)
    op.create_index(
        op.f("ix_strategy_instrument_type"), "strategy", ["instrument_type"], unique=False
    )
    op.create_index(op.f("ix_strategy_symbol"), "strategy", ["symbol"], unique=False)
    op.create_index(op.f("ix_strategy_user_id"), "strategy", ["user_id"], unique=False)
    op.create_table(
        "daily_profits",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("profit", sa.Float(), nullable=True),
        sa.Column("strategy_id", sa.UUID(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.ForeignKeyConstraint(
            ["strategy_id"],
            ["strategy.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_daily_profits_strategy_id"), "daily_profits", ["strategy_id"], unique=False
    )
    op.create_table(
        "take_away_profit",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("profit", sa.Float(), nullable=True),
        sa.Column("futures_profit", sa.Float(), nullable=True),
        sa.Column("strategy_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("total_trades", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["strategy_id"],
            ["strategy.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_take_away_profit_strategy_id"), "take_away_profit", ["strategy_id"], unique=False
    )
    op.create_table(
        "trade",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("instrument", sa.String(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.Column("position", sa.String(), nullable=False),
        sa.Column("action", sa.String(), nullable=False),
        sa.Column("entry_price", sa.Float(), nullable=False),
        sa.Column("exit_price", sa.Float(), nullable=True),
        sa.Column("profit", sa.Float(), nullable=True),
        sa.Column("future_received_entry_price", sa.Float(), nullable=True),
        sa.Column("future_entry_price", sa.Float(), nullable=True),
        sa.Column("future_exit_price", sa.Float(), nullable=True),
        sa.Column("future_profit", sa.Float(), nullable=True),
        sa.Column("placed_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("exited_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("strike", sa.Float(), nullable=True),
        sa.Column("option_type", sa.String(), nullable=True),
        sa.Column("expiry", sa.Date(), nullable=True),
        sa.Column("strategy_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["strategy_id"],
            ["strategy.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_trade_action"), "trade", ["action"], unique=False)
    op.create_index(op.f("ix_trade_expiry"), "trade", ["expiry"], unique=False)
    op.create_index(op.f("ix_trade_instrument"), "trade", ["instrument"], unique=False)
    op.create_index(op.f("ix_trade_option_type"), "trade", ["option_type"], unique=False)
    op.create_index(op.f("ix_trade_position"), "trade", ["position"], unique=False)
    op.create_index(op.f("ix_trade_strategy_id"), "trade", ["strategy_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_trade_strategy_id"), table_name="trade")
    op.drop_index(op.f("ix_trade_position"), table_name="trade")
    op.drop_index(op.f("ix_trade_option_type"), table_name="trade")
    op.drop_index(op.f("ix_trade_instrument"), table_name="trade")
    op.drop_index(op.f("ix_trade_expiry"), table_name="trade")
    op.drop_index(op.f("ix_trade_action"), table_name="trade")
    op.drop_table("trade")
    op.drop_index(op.f("ix_take_away_profit_strategy_id"), table_name="take_away_profit")
    op.drop_table("take_away_profit")
    op.drop_index(op.f("ix_daily_profits_strategy_id"), table_name="daily_profits")
    op.drop_table("daily_profits")
    op.drop_index(op.f("ix_strategy_user_id"), table_name="strategy")
    op.drop_index(op.f("ix_strategy_symbol"), table_name="strategy")
    op.drop_index(op.f("ix_strategy_instrument_type"), table_name="strategy")
    op.drop_index(op.f("ix_strategy_exchange"), table_name="strategy")
    op.drop_index(op.f("ix_strategy_broker_id"), table_name="strategy")
    op.drop_table("strategy")
    op.drop_index(op.f("ix_broker_user_id"), table_name="broker_clients")
    op.drop_table("broker_clients")
    op.drop_table("user")
    # ### end Alembic commands ###
